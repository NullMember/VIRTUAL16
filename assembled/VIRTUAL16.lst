; Copyright (c) 2019 Malik Enes Åžafak
;
; Permission is hereby granted, free of charge, to any person obtaining
; a copy of this software and associated documentation files (the
; "Software"), to deal in the Software without restriction, including
; without limitation the rights to use, copy, modify, merge, publish,
; distribute, sublicense, and/or sell copies of the Software, and to
; permit persons to whom the Software is furnished to do so, subject to
; the following conditions:
;
; The above copyright notice and this permission notice shall be
; included in all copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
; LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
; OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
; WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

.6502

;FOR CHANGING REGISTER LOCATION ON ZEROPAGE (MAXIMUM 0x100 - 0x30 = D0)
LB equ 0x00
;FOR CHANGING VIRTUAL CPU ROUTINES LOCATION
STARTADDR equ 0x0400
;FOR CHANGING STACK PAGE
STACKPAGE equ 0x0100

R0 equ LB+0x00
R1 equ LB+0x02
R2 equ LB+0x04
R3 equ LB+0x06
R4 equ LB+0x08
R5 equ LB+0x0A
R6 equ LB+0x0C
R7 equ LB+0x0E
R8 equ LB+0x10
R9 equ LB+0x12
R10 equ LB+0x14
R11 equ LB+0x16
R12 equ LB+0x18
R13 equ LB+0x1A
R14 equ LB+0x1C
R15 equ LB+0x1E

HB equ LB+0x01
PC equ R15
SR equ LB+R14
SP equ HB+R14
SPPAGE equ LB+0x20
FIRSTPC equ LB+0x22
TEMP equ LB+0x24
ACC equ LB+0x28
XREG equ LB+0x29
YREG equ LB+0x2A
STATUS equ LB+0x2B

.ORG STARTADDR

;   TODO:
;   FIX RETURN FROM VIRTUAL CPU ROUTINE
;   TRY TO OPTIMISE FETCH-DECODE ROUTINES

VIRCPU:
    JSR SAVE        ;SAVE 6502 MODE REGISTERS

0x0400: 20 54 05         jsr 0x0554                          cycles: 6

INITSTACK:
    LDA #0x00       ;LOAD LSB OF 0x0100

0x0403: a9 00            lda #0x00                           cycles: 2

    STA SPPAGE      ;STORE IT. WE NEED THIS BECAUSE OF STACK

0x0405: 85 20            sta 0x20                            cycles: 3

    LDA #0x01       ;LOAD MSB OF 0x0100

0x0407: a9 01            lda #0x01                           cycles: 2

    STA SPPAGE+1    ;STORE IT

0x0409: 85 21            sta 0x21                            cycles: 3

    TSX             ;TRANSFER STACK POINTER TO X

0x040b: ba               tsx                                 cycles: 2

    TXA             ;TRANSFER STACK POINTER X TO A

0x040c: 8a               txa                                 cycles: 2

    SEC             ;SET CARRY (CLEAR BORROW)

0x040d: 38               sec                                 cycles: 2

    SBC #0x08       ;8 BYTE SAFETY AREA

0x040e: e9 08            sbc #0x08                           cycles: 2

    STA SP          ;STORE IT TO VIRTUAL CPUS STACK POINTER

0x0410: 85 1d            sta 0x1d                            cycles: 3

LOADPC:
    PLA             ;PULL VIRTUAL PC LOW BYTE FROM STACK

0x0412: 68               pla                                 cycles: 4

    STA PC          ;STORE IT TO PC REGISTER LOW BYTE

0x0413: 85 1e            sta 0x1e                            cycles: 3

    PLA             ;PULL VIRTUAL PC HIGH BYTE FROM STACK

0x0415: 68               pla                                 cycles: 4

    STA PC+1        ;STORE IT TO PC REGISTER HIGH BYTE

0x0416: 85 1f            sta 0x1f                            cycles: 3

PREINCPC:
    INC PC          ;INCREMENT PC 1 TIME 

0x0418: e6 1e            inc 0x1e                            cycles: 5

    BNE STOREPC     ;BECAUSE JSR INSTRUCTION STORES DESTINATION ADDRESS - 1 IN STACK

0x041a: d0 02            bne 0x041e (offset=2)               cycles: 2-5

    INC PC+1        ;IF PAGE CROSSED

0x041c: e6 1f            inc 0x1f                            cycles: 5

STOREPC:            ;WE NEED THIS ROUTINE BECAUSE OF JSR INSTRUCTION
    LDA PC

0x041e: a5 1e            lda 0x1e                            cycles: 3

    STA FIRSTPC

0x0420: 85 22            sta 0x22                            cycles: 3

    LDA PC+1

0x0422: a5 1f            lda 0x1f                            cycles: 3

    STA FIRSTPC+1

0x0424: 85 23            sta 0x23                            cycles: 3

FETCH:
    LDA #(EXECUTE >> 8)     ;STORE EXECUTE ADDRESS FOR RETURNING FROM SUBROUTINE - MSB

0x0426: a9 04            lda #0x04                           cycles: 2

    PHA

0x0428: 48               pha                                 cycles: 3

    LDA #(EXECUTE & 0xFF)   ;LSB

0x0429: a9 5d            lda #0x5d                           cycles: 2

    PHA

0x042b: 48               pha                                 cycles: 3

    LDY #0x01       ;LOAD 1 TO Y

0x042c: a0 01            ldy #0x01                           cycles: 2

    LDA (PC),Y      ;LOAD REGISTER BYTE

0x042e: b1 1e            lda (0x1e),y                        cycles: 5-6

    TAX             ;TRANSFER IT TO X REGISTER

0x0430: aa               tax                                 cycles: 2

    DEY             ;DECREASE Y

0x0431: 88               dey                                 cycles: 2

    LDA (PC),Y      ;LOAD INSTRUCTION BYTE

0x0432: b1 1e            lda (0x1e),y                        cycles: 5-6

    CMP #0xE0       ;IF INSTRUCTION IS ABSOLUTE

0x0434: c9 e0            cmp #0xe0                           cycles: 2

    BCS ABSOLUTE

0x0436: b0 39            bcs 0x0471 (offset=57)              cycles: 2-5

    CMP #0x50       ;IF INSTRUCTION IS BRANCH

0x0438: c9 50            cmp #0x50                           cycles: 2

    BCS BRANCH

0x043a: b0 3b            bcs 0x0477 (offset=59)              cycles: 2-5

    CMP #0x20       ;IF INSTRUCTION IS IMMEDIATE

0x043c: c9 20            cmp #0x20                           cycles: 2

    BCS IMMEDIATE

0x043e: b0 34            bcs 0x0474 (offset=52)              cycles: 2-5

    ASL             ;MULTIPLY BY 2 FOR PROPER ADDRESS DECODING

0x0440: 0a               asl                                 cycles: 2

    TAY             ;TRANSFER IT TO Y REGISTER

0x0441: a8               tay                                 cycles: 2

DECODEREG:
    INY

0x0442: c8               iny                                 cycles: 2

    LDA INSTR,Y     ;LOAD LSB OF INSTRUCTION ADDRESS

0x0443: b9 bb 07         lda 0x07bb,y                        cycles: 4-5

    PHA             ;PUSH TO STACK FOR RTS

0x0446: 48               pha                                 cycles: 3

    DEY             ;DECREASE Y REGISTER

0x0447: 88               dey                                 cycles: 2

    LDA INSTR,Y     ;LOAD MSB OF INSTRUCTION ADDRESS

0x0448: b9 bb 07         lda 0x07bb,y                        cycles: 4-5

    PHA             ;PUSH TO STACK FOR RTS

0x044b: 48               pha                                 cycles: 3

    TXA             ;TRANSFER REGISTER BYTE FROM X TO A

0x044c: 8a               txa                                 cycles: 2

    TAY             ;BACKUP REGISTER BYTE

0x044d: a8               tay                                 cycles: 2

    LSR             ;GET SOURCE

0x044e: 4a               lsr                                 cycles: 2

    LSR

0x044f: 4a               lsr                                 cycles: 2

    LSR

0x0450: 4a               lsr                                 cycles: 2

    LSR

0x0451: 4a               lsr                                 cycles: 2

    ASL             ;MULTIPLY BY 2 FOR PROPER REGISTER ACCESS

0x0452: 0a               asl                                 cycles: 2

    TAX             ;TRANSFER SRC TO X

0x0453: aa               tax                                 cycles: 2

    TYA             ;RESTORE REGISTER BYTE

0x0454: 98               tya                                 cycles: 2

    AND #0x0F       ;GET DESTINATION

0x0455: 29 0f            and #0x0f                           cycles: 2

    ASL             ;MULTIPLY BY 2

0x0457: 0a               asl                                 cycles: 2

    TAY             ;TRANSFER DST TO Y

0x0458: a8               tay                                 cycles: 2

RESTORESR:
    LDA SR          ;LOAD SR TO A

0x0459: a5 1c            lda 0x1c                            cycles: 3

    PHA             ;PUSH A TO STACK

0x045b: 48               pha                                 cycles: 3

    PLP             ;PULL SR FROM STACK

0x045c: 28               plp                                 cycles: 4

EXECUTE:
    RTS             ;WE TRANSFERRED INSTRUCTION ADDRESS TO STACK SO USE RTS

0x045d: 60               rts                                 cycles: 6

STORESR:
    PHP             ;PUSH SR TO STACK

0x045e: 08               php                                 cycles: 3

    PLA             ;PULL SR FROM STACK TO A

0x045f: 68               pla                                 cycles: 4

    STA SR

0x0460: 85 1c            sta 0x1c                            cycles: 3

INCPC1:
    INC PC          ;INCREASE PROGRAM COUNTER

0x0462: e6 1e            inc 0x1e                            cycles: 5

    BNE INCPC2

0x0464: d0 02            bne 0x0468 (offset=2)               cycles: 2-5

    INC PC+1        ;IF PAGE CROSSED

0x0466: e6 1f            inc 0x1f                            cycles: 5

INCPC2:
    INC PC          ;OUR VIRTUAL PROCESSOR USES TWO-BYTE INSTRUCTIONS

0x0468: e6 1e            inc 0x1e                            cycles: 5

    BNE NEWINSTR

0x046a: d0 02            bne 0x046e (offset=2)               cycles: 2-5

    INC PC+1        ;IF PAGE CROSSED

0x046c: e6 1f            inc 0x1f                            cycles: 5

NEWINSTR:
    JMP FETCH       ;IF EXECUTION ENDED FETCH NEW INSTRUCTION

0x046e: 4c 26 04         jmp 0x0426                          cycles: 3

    
ABSOLUTE:
    JMP DECODEABS

0x0471: 4c 7a 04         jmp 0x047a                          cycles: 3

IMMEDIATE:
    JMP DECODEIMM

0x0474: 4c a8 04         jmp 0x04a8                          cycles: 3

BRANCH:
    JMP DECODEBRN

0x0477: 4c d3 04         jmp 0x04d3                          cycles: 3

    
DECODEABS:          ;DECODE ABSOLUTE MODE ADDRESSING
    CMP #0xF0       ;IS REGISTER TO ADDRESS?

0x047a: c9 f0            cmp #0xf0                           cycles: 2

    PHP             ;PUSH SR TO STACK. WE WILL USE IT

0x047c: 08               php                                 cycles: 3

    STX TEMP        ;STORE ABSOLUTE ADDRESS POINTER LSB TO TEMP

0x047d: 86 24            stx 0x24                            cycles: 3

    AND #0x0F       ;GET REGISTER ADDRESS

0x047f: 29 0f            and #0x0f                           cycles: 2

    ASL             ;MULTIPLY FOR PROPER ADDRESS DECODE

0x0481: 0a               asl                                 cycles: 2

    TAX             ;TRANSFER IT TO X

0x0482: aa               tax                                 cycles: 2

    LDY #0x02       ;FOR FETCHING ABSOLUTE ADDRESS POINTER MSB

0x0483: a0 02            ldy #0x02                           cycles: 2

    LDA (PC),Y      ;LOAD 2 TO Y AND FETCH MSB

0x0485: b1 1e            lda (0x1e),y                        cycles: 5-6

    STA TEMP+1      ;STORE ABSOLUTE ADDRESS POINTER MSB TO TEMP+1

0x0487: 85 25            sta 0x25                            cycles: 3

    DEY             ;WE WILL USE Y TO ACCESS ABSOLUTE ADDRESS

0x0489: 88               dey                                 cycles: 2

    PLP             ;PULL SR BACK

0x048a: 28               plp                                 cycles: 4

    BCS DECODEABSSTORE  ;IS REGISTER TO ADDRESS?

0x048b: b0 0b            bcs 0x0498 (offset=11)              cycles: 2-5

DECODEABSLOAD:
    LDA (TEMP),Y    ;LOAD MSB FROM ABSOLUTE ADDRESS

0x048d: b1 24            lda (0x24),y                        cycles: 5-6

    STA HB,X        ;STORE TO REGISTER LSB

0x048f: 95 01            sta 0x01,x                          cycles: 4

    DEY

0x0491: 88               dey                                 cycles: 2

    LDA (TEMP),Y    ;LOAD LSB FROM ABSOLUTE ADDRESS

0x0492: b1 24            lda (0x24),y                        cycles: 5-6

    STA LB,X        ;STORE TO REGISTER LSB

0x0494: 95 00            sta 0x00,x                          cycles: 4

    BCC ABSIMMEND

0x0496: 90 09            bcc 0x04a1 (offset=9)               cycles: 2-5

DECODEABSSTORE:
    LDA HB,X        ;LOAD REGISTER MSB

0x0498: b5 01            lda 0x01,x                          cycles: 4

    STA (TEMP),Y    ;STORE ABSOLUTE ADDRESS MSB

0x049a: 91 24            sta (0x24),y                        cycles: 6

    DEY

0x049c: 88               dey                                 cycles: 2

    LDA LB,X        ;LOAD REGISTER LSB

0x049d: b5 00            lda 0x00,x                          cycles: 4

    STA (TEMP),Y    ;STORE ABSOLUTE ADDRESS LSB

0x049f: 91 24            sta (0x24),y                        cycles: 6

ABSIMMEND:          ;BECAUSE IMMEDIATE WORD AND ABSOLUTE MOV INSTRUCTIONS TAKES 3 BYTE
    INC PC          ;INCREASE PROGRAM COUNTER

0x04a1: e6 1e            inc 0x1e                            cycles: 5

    BNE ABSIMMRTS

0x04a3: d0 02            bne 0x04a7 (offset=2)               cycles: 2-5

    INC PC+1        ;IF PAGE CROSSED

0x04a5: e6 1f            inc 0x1f                            cycles: 5

ABSIMMRTS:
    RTS

0x04a7: 60               rts                                 cycles: 6


DECODEIMM:          ;DECODE IMMEDIATE MODE ADDRESSING
    CMP #0x40       ;IS WORD?

0x04a8: c9 40            cmp #0x40                           cycles: 2

    BCS DECODEIMMWORD;BRANCH TO WORD ROUTINE

0x04aa: b0 10            bcs 0x04bc (offset=16)              cycles: 2-5

    CMP #0x30       ;IF BYTE

0x04ac: c9 30            cmp #0x30                           cycles: 2

    PHP             ;PUSH COMPARE RESULT

0x04ae: 08               php                                 cycles: 3

    AND #0x0F       ;GET REGISTER

0x04af: 29 0f            and #0x0f                           cycles: 2

    ASL             ;DOUBLE IT FOR PROPER REGISTER ADDRESS

0x04b1: 0a               asl                                 cycles: 2

    TAY             ;TRANSFER REGISTER ADDRESS TO Y

0x04b2: a8               tay                                 cycles: 2

    TXA             ;TRANSFER IMMEDIATE VALUE TO A

0x04b3: 8a               txa                                 cycles: 2

    PLP             ;PULL MSB COMPARE RESULT FROM STACK

0x04b4: 28               plp                                 cycles: 4

    BCS DECODEIMMLSB;BRANCH TO LSB ROUTINE

0x04b5: b0 01            bcs 0x04b8 (offset=1)               cycles: 2-5

    INY             ;IF MSB INCREASE REGISTER ADDRESS

0x04b7: c8               iny                                 cycles: 2

DECODEIMMLSB:
    STA LB,Y        ;STORE IMMEDIATE VALUE TO REGISTER

0x04b8: 99 00 00         sta 0x0000,y                        cycles: 5

    RTS

0x04bb: 60               rts                                 cycles: 6

DECODEIMMWORD:
    PHA             ;PUSH INSTRUCTION BYTE TO STACK

0x04bc: 48               pha                                 cycles: 3

    LDY #0x02       ;LOAD #0x02 TO Y

0x04bd: a0 02            ldy #0x02                           cycles: 2

    LDA (PC),Y      ;GET MSB OF IMMEDIATE VALUE

0x04bf: b1 1e            lda (0x1e),y                        cycles: 5-6

    STA TEMP        ;STORE IT TO TEMP

0x04c1: 85 24            sta 0x24                            cycles: 3

    PLA             ;PULL INSTRUCTION BYTE FROM STACK

0x04c3: 68               pla                                 cycles: 4

    AND #0x0F       ;GET REGISTER

0x04c4: 29 0f            and #0x0f                           cycles: 2

    ASL             ;DOUBLE IT FOR PROPER REGISTER ADDRESS

0x04c6: 0a               asl                                 cycles: 2

    TAY             ;TRANSFER REGISTER ADDRESS TO Y

0x04c7: a8               tay                                 cycles: 2

    TXA             ;TRANSFER IMMEDIATE VALUE LSB TO A

0x04c8: 8a               txa                                 cycles: 2

    STA LB,Y        ;STORE TO REGISTER LSB

0x04c9: 99 00 00         sta 0x0000,y                        cycles: 5

    LDA TEMP        ;LOAD IMMEDIATE MSB

0x04cc: a5 24            lda 0x24                            cycles: 3

    STA HB,Y        ;STORE REGISTER MSB

0x04ce: 99 01 00         sta 0x0001,y                        cycles: 5

    BCC ABSIMMEND

0x04d1: 90 ce            bcc 0x04a1 (offset=-50)             cycles: 2-5


DECODEBRN:          ;DECODE BRANCH MODE ADDRESSING
    STX TEMP        ;STORE BRANCH VALUE TO TEMPORARY LOCATION

0x04d3: 86 24            stx 0x24                            cycles: 3

    TAY             ;BACKUP INSTRUCTION BYTE

0x04d5: a8               tay                                 cycles: 2

    AND #0x0F       ;EXTRACT REGISTER ADDRESS

0x04d6: 29 0f            and #0x0f                           cycles: 2

    ASL             ;DOUBLE IT FOR PROPER REGISTER ADDRESS

0x04d8: 0a               asl                                 cycles: 2

    TAX             ;TRANSFER IT TO X REGISTER

0x04d9: aa               tax                                 cycles: 2

    TYA             ;TRANSFER INSTRUCTION BYTE TO A AGAIN

0x04da: 98               tya                                 cycles: 2

    CMP #0xD0       ;TEST FOR BRANCH OPERATION

0x04db: c9 d0            cmp #0xd0                           cycles: 2

    BCS INSBCC      ;BRANCH CARRY CLEAR     0xC0

0x04dd: b0 56            bcs 0x0535 (offset=86)              cycles: 2-6

    CMP #0xC0

0x04df: c9 c0            cmp #0xc0                           cycles: 2

    BCS INSBCS      ;BRANCH CARRY SET       0xB0

0x04e1: b0 4b            bcs 0x052e (offset=75)              cycles: 2-6

    CMP #0xB0

0x04e3: c9 b0            cmp #0xb0                           cycles: 2

    BCS INSBRA      ;BRANCH ALWAYS          0xA0

0x04e5: b0 44            bcs 0x052b (offset=68)              cycles: 2-6

    CMP #0xA0

0x04e7: c9 a0            cmp #0xa0                           cycles: 2

    BCS INSBNM1     ;BRANCH IF NOT MINUS 1  0x90

0x04e9: b0 37            bcs 0x0522 (offset=55)              cycles: 2-6

    CMP #0x90

0x04eb: c9 90            cmp #0x90                           cycles: 2

    BCS INSBM1      ;BRANCH IF MINUS 1      0x80

0x04ed: b0 2a            bcs 0x0519 (offset=42)              cycles: 2-6

    CMP #0x80

0x04ef: c9 80            cmp #0x80                           cycles: 2

    BCS INSBNE      ;BRANCH IF NOT EQUAL    0x70

0x04f1: b0 1f            bcs 0x0512 (offset=31)              cycles: 2-6

    CMP #0x70

0x04f3: c9 70            cmp #0x70                           cycles: 2

    BCS INSBEQ      ;BRANCH IF EQUAL        0x60

0x04f5: b0 14            bcs 0x050b (offset=20)              cycles: 2-6

    CMP #0x60

0x04f7: c9 60            cmp #0x60                           cycles: 2

    BCS INSBMI      ;BRANCH IF MINUS        0x50

0x04f9: b0 0b            bcs 0x0506 (offset=11)              cycles: 2-6

    CMP #0x50

0x04fb: c9 50            cmp #0x50                           cycles: 2

    BCS INSBPL      ;BRANCH IF PLUS         0x40

0x04fd: b0 02            bcs 0x0501 (offset=2)               cycles: 2-6

    BCC INSNUL

0x04ff: 90 3b            bcc 0x053c (offset=59)              cycles: 2-5

;PLACE SWEET16 BRANCH SUBROUTINES HERE
INSBPL:
    LDA HB,X        ;TEST FOR PLUS

0x0501: b5 01            lda 0x01,x                          cycles: 4

    BPL EXECUTEBRN  ;BRANCH IF SO

0x0503: 10 38            bpl 0x053d (offset=56)              cycles: 2-5

    RTS

0x0505: 60               rts                                 cycles: 6

INSBMI:
    LDA HB,X        ;TEST FOR MINUS

0x0506: b5 01            lda 0x01,x                          cycles: 4

    BMI EXECUTEBRN

0x0508: 30 33            bmi 0x053d (offset=51)              cycles: 2-5

    RTS

0x050a: 60               rts                                 cycles: 6

INSBEQ:
    LDA LB,X        ;TEST FOR ZERO

0x050b: b5 00            lda 0x00,x                          cycles: 4

    ORA HB,X        ;(BOTH BYTES)

0x050d: 15 01            ora 0x01,x                          cycles: 4

    BEQ EXECUTEBRN  ;BRANCH IF SO

0x050f: f0 2c            beq 0x053d (offset=44)              cycles: 2-5

    RTS

0x0511: 60               rts                                 cycles: 6

INSBNE:
    LDA LB,X        ;TEST FOR NON-ZERO

0x0512: b5 00            lda 0x00,x                          cycles: 4

    ORA HB,X        ;(BOTH BYTES)

0x0514: 15 01            ora 0x01,x                          cycles: 4

    BNE EXECUTEBRN  ;BRANCH IF SO

0x0516: d0 25            bne 0x053d (offset=37)              cycles: 2-5

    RTS

0x0518: 60               rts                                 cycles: 6

INSBM1:
    LDA LB,X        ;CHECK BOTH BYTES

0x0519: b5 00            lda 0x00,x                          cycles: 4

    AND HB,X        ;FOR $FF (MINUS 1)

0x051b: 35 01            and 0x01,x                          cycles: 4

    EOR #0xFF

0x051d: 49 ff            eor #0xff                           cycles: 2

    BEQ EXECUTEBRN  ;BRANCH IF SO

0x051f: f0 1c            beq 0x053d (offset=28)              cycles: 2-5

    RTS

0x0521: 60               rts                                 cycles: 6

INSBNM1:
    LDA LB,X

0x0522: b5 00            lda 0x00,x                          cycles: 4

    AND HB,X        ;CHECK BOTH BYTES FOR NO $FF

0x0524: 35 01            and 0x01,x                          cycles: 4

    EOR #0xFF

0x0526: 49 ff            eor #0xff                           cycles: 2

    BNE EXECUTEBRN  ;BRANCH IF NOT MINUS 1

0x0528: d0 13            bne 0x053d (offset=19)              cycles: 2-5

    RTS

0x052a: 60               rts                                 cycles: 6

;PLACE SWEET16 BRANCH SUBROUTINES HERE
INSBRA:
    JMP EXECUTEBRN

0x052b: 4c 3d 05         jmp 0x053d                          cycles: 3

INSBCS:
    LDA SR          ;LOAD SR TO A

0x052e: a5 1c            lda 0x1c                            cycles: 3

    PHA             ;PUSH A TO STACK

0x0530: 48               pha                                 cycles: 3

    PLP             ;PULL SR FROM STACK

0x0531: 28               plp                                 cycles: 4

    BCS EXECUTEBRN  ;BRANCH IF CARRY SET

0x0532: b0 09            bcs 0x053d (offset=9)               cycles: 2-5

    RTS

0x0534: 60               rts                                 cycles: 6

INSBCC:
    LDA SR          ;LOAD SR TO A

0x0535: a5 1c            lda 0x1c                            cycles: 3

    PHA             ;PUSH A TO STACK

0x0537: 48               pha                                 cycles: 3

    PLP             ;PULL SR FROM STACK

0x0538: 28               plp                                 cycles: 4

    BCC EXECUTEBRN  ;BRANCH IF CARRY CLEAR

0x0539: 90 02            bcc 0x053d (offset=2)               cycles: 2-5

    RTS

0x053b: 60               rts                                 cycles: 6

INSNUL:
    RTS

0x053c: 60               rts                                 cycles: 6


EXECUTEBRN:
    CLC             ;CLEAR CARRY

0x053d: 18               clc                                 cycles: 2

    LDA PC          ;LOAD PC LSB

0x053e: a5 1e            lda 0x1e                            cycles: 3

    ADC TEMP        ;ADD BRANCH VALUE TO PC

0x0540: 65 24            adc 0x24                            cycles: 3

    STA PC          ;STORE IT TO PC LSB

0x0542: 85 1e            sta 0x1e                            cycles: 3

    LDA PC+1        ;LOAD PC MSB

0x0544: a5 1f            lda 0x1f                            cycles: 3

    CPX #0x00       ;COMPARE TO 0x00

0x0546: e0 00            cpx #0x00                           cycles: 2

    BCC EXECUTEBRNPSTV  ;IF CARRY CLEAR BRANCH POSITIVE OFFSET

0x0548: 90 05            bcc 0x054f (offset=5)               cycles: 2-5

EXECUTEBRNNGTV:     ;IF CARRY SET BRANCH NEGATIVE OFFSET
    ADC #0xFF       ;ADD 0xFF TO PC MSB

0x054a: 69 ff            adc #0xff                           cycles: 2

    STA PC+1

0x054c: 85 1f            sta 0x1f                            cycles: 3

    RTS

0x054e: 60               rts                                 cycles: 6

EXECUTEBRNPSTV:
    ADC #0x00

0x054f: 69 00            adc #0x00                           cycles: 2

    STA PC+1

0x0551: 85 1f            sta 0x1f                            cycles: 3

    RTS

0x0553: 60               rts                                 cycles: 6


;SAVE AND RESTORE SUBROUTINES
SAVE:
    STA ACC

0x0554: 85 28            sta 0x28                            cycles: 3

    STX XREG

0x0556: 86 29            stx 0x29                            cycles: 3

    STY YREG

0x0558: 84 2a            sty 0x2a                            cycles: 3

    PHP

0x055a: 08               php                                 cycles: 3

    PLA

0x055b: 68               pla                                 cycles: 4

    STA STATUS

0x055c: 85 2b            sta 0x2b                            cycles: 3

    CLD

0x055e: d8               cld                                 cycles: 2

    RTS

0x055f: 60               rts                                 cycles: 6

;------------------------------
RESTORE:
    LDA STATUS

0x0560: a5 2b            lda 0x2b                            cycles: 3

    PHA

0x0562: 48               pha                                 cycles: 3

    LDA ACC

0x0563: a5 28            lda 0x28                            cycles: 3

    LDX XREG

0x0565: a6 29            ldx 0x29                            cycles: 3

    LDY YREG

0x0567: a4 2a            ldy 0x2a                            cycles: 3

    PLP

0x0569: 28               plp                                 cycles: 4

    RTS

0x056a: 60               rts                                 cycles: 6

;-------------------------------

;.ORG 0x0500

INSINC:
    TYA             ;TRANSFER INCREMENT COUNTER TO A

0x056b: 98               tya                                 cycles: 2

    LSR             ;WE MULTIPLIED IT BY 2. REVERSE IT

0x056c: 4a               lsr                                 cycles: 2

    ADC #1          ;MAP 0-15 TO 1-16

0x056d: 69 01            adc #0x01                           cycles: 2

    ADC LB,X        ;ADD INCREMENT VALUE TO LSB

0x056f: 75 00            adc 0x00,x                          cycles: 4

    STA LB,X        ;STORE IT

0x0571: 95 00            sta 0x00,x                          cycles: 4

    LDA #0x00       ;IF THERE IS CARRY

0x0573: a9 00            lda #0x00                           cycles: 2

    ADC HB,X        ;ADD IT TO MSB

0x0575: 75 01            adc 0x01,x                          cycles: 4

    STA HB,X

0x0577: 95 01            sta 0x01,x                          cycles: 4

    RTS

0x0579: 60               rts                                 cycles: 6

    
INSDEC:
    TYA             ;TRANSFER INCREMENT COUNTER TO A

0x057a: 98               tya                                 cycles: 2

    LSR             ;WE MULTIPLIED IT BY 2. REVERSE IT

0x057b: 4a               lsr                                 cycles: 2

    ADC #1          ;ADD 1

0x057c: 69 01            adc #0x01                           cycles: 2

    TAY             ;TRANSFER IT TO Y AGAIN

0x057e: a8               tay                                 cycles: 2

    SEC             ;SET CARRY (RESET BORROW)

0x057f: 38               sec                                 cycles: 2

    LDA LB,X        ;LOAD LSB OF REGISTER

0x0580: b5 00            lda 0x00,x                          cycles: 4

    STY LB,X        ;STORE DECREMENT VALUE TO REGISTER

0x0582: 94 00            sty 0x00,x                          cycles: 4

    SBC LB,X        ;SUB DECREMENT VALUE FROM REGISTER

0x0584: f5 00            sbc 0x00,x                          cycles: 4

    STA LB,X        ;STORE IT TO LSB

0x0586: 95 00            sta 0x00,x                          cycles: 4

    LDA HB,X        ;LOAD MSB

0x0588: b5 01            lda 0x01,x                          cycles: 4

    SBC #0x00       ;IF THERE IS BORROW SUB IT

0x058a: e9 00            sbc #0x00                           cycles: 2

    STA HB,X        ;STORE IT TO MSB

0x058c: 95 01            sta 0x01,x                          cycles: 4

    RTS

0x058e: 60               rts                                 cycles: 6


INSRET:             ;RETURN FROM VIRTUAL CPU
    INC PC          ;INCREASE PROGRAM COUNTER

0x058f: e6 1e            inc 0x1e                            cycles: 5

    BNE INSRETRESTORE

0x0591: d0 02            bne 0x0595 (offset=2)               cycles: 2-5

    INC PC+1        ;IF PAGE CROSSED

0x0593: e6 1f            inc 0x1f                            cycles: 5

INSRETRESTORE:
    PLA             ;PULL EXECUTE SUBROUTINE ADDRESS

0x0595: 68               pla                                 cycles: 4

    PLA             ;FOR CLEARING STACK

0x0596: 68               pla                                 cycles: 4

    JSR RESTORE     ;RESTORE OLD VALUES

0x0597: 20 60 05         jsr 0x0560                          cycles: 6

    JMP (PC)        ;GO BACK TO REAL CPU

0x059a: 6c 1e 00         jmp (0x001e)                        cycles: 5


INSADD:             ;IF INSTRUCTION IS ADD WITHOUT CARRY
    CLC             ;CLEAR CARRY

0x059d: 18               clc                                 cycles: 2

INSADC:             ;IF INSTRUCTION IS ADD WITH CARRY
    LDA LB,X        ;LOAD DESTINATION LSB

0x059e: b5 00            lda 0x00,x                          cycles: 4

    ADC LB,Y        ;ADD SOURCE LSB TO DESTINATION LSB

0x05a0: 79 00 00         adc 0x0000,y                        cycles: 4-5

    STA LB,Y        ;STORE IT TO DESTINATION LSB

0x05a3: 99 00 00         sta 0x0000,y                        cycles: 5

    LDA HB,X        ;LOAD DESTINATION MSB

0x05a6: b5 01            lda 0x01,x                          cycles: 4

    ADC HB,Y        ;ADD SOURCE MSB TO DESTINATION MSB

0x05a8: 79 01 00         adc 0x0001,y                        cycles: 4-5

    STA HB,Y        ;STORE IT TO DESTINATION MSB

0x05ab: 99 01 00         sta 0x0001,y                        cycles: 5

    RTS

0x05ae: 60               rts                                 cycles: 6


INSSUB:             ;IF INSTRUCTION IS SUB WITHOUT BORROW
    SEC             ;SET CARRY (CLEAR BORROW)

0x05af: 38               sec                                 cycles: 2

INSSBC:             ;IF INSTRUCTION IS SUB WITH BORROW 
    LDA LB,X        ;LOAD DESTINATION LSB

0x05b0: b5 00            lda 0x00,x                          cycles: 4

    SBC LB,Y        ;SUB SOURCE LSB FROM DESTINATION LSB

0x05b2: f9 00 00         sbc 0x0000,y                        cycles: 4-5

    STA LB,Y        ;STORE IT TO DESTINATION LSB

0x05b5: 99 00 00         sta 0x0000,y                        cycles: 5

    LDA HB,X        ;LOAD DESTINATION MSB

0x05b8: b5 01            lda 0x01,x                          cycles: 4

    SBC HB,Y        ;SUB SOURCE MSB FROM DESTINATION MSB

0x05ba: f9 01 00         sbc 0x0001,y                        cycles: 4-5

    STA HB,Y        ;STORE IT TO DESTINATION MSB

0x05bd: 99 01 00         sta 0x0001,y                        cycles: 5

INSSUBRETURN:
    RTS

0x05c0: 60               rts                                 cycles: 6

    
INSPUSH:
    LDY SP          ;LOAD STACK POINTER

0x05c1: a4 1d            ldy 0x1d                            cycles: 3

    LDA HB,X        ;GET MSB OF REGISTER

0x05c3: b5 01            lda 0x01,x                          cycles: 4

    STA (SPPAGE),Y ;PUSH TO STACK

0x05c5: 91 20            sta (0x20),y                        cycles: 6

    DEY             ;DECREASE STACK POINTER

0x05c7: 88               dey                                 cycles: 2

    LDA LB,X        ;GET LSB OF REGISTER

0x05c8: b5 00            lda 0x00,x                          cycles: 4

    STA (SPPAGE),Y ;PUSH TO STACK

0x05ca: 91 20            sta (0x20),y                        cycles: 6

    DEY             ;DECREASE STACK POINTER

0x05cc: 88               dey                                 cycles: 2

    STY SP          ;UPDATE STACK POINTER

0x05cd: 84 1d            sty 0x1d                            cycles: 3

    RTS

0x05cf: 60               rts                                 cycles: 6


INSPOP:
    LDY SP          ;LOAD STACK POINTER

0x05d0: a4 1d            ldy 0x1d                            cycles: 3

    INY             ;INCREASE STACK POINTER

0x05d2: c8               iny                                 cycles: 2

    LDA (SPPAGE),Y ;POP LSB OF REGISTER

0x05d3: b1 20            lda (0x20),y                        cycles: 5-6

    STA LB,X        ;STORE TO LSB OF REGISTER

0x05d5: 95 00            sta 0x00,x                          cycles: 4

    INY             ;INCREASE STACK POINTER

0x05d7: c8               iny                                 cycles: 2

    LDA (SPPAGE),Y ;POP MSB OF REGISTER

0x05d8: b1 20            lda (0x20),y                        cycles: 5-6

    STA HB,X        ;STORE TO MSB OF REGISTER

0x05da: 95 01            sta 0x01,x                          cycles: 4

    STY SP          ;UPDATE STACK POINTER

0x05dc: 84 1d            sty 0x1d                            cycles: 3

    RTS

0x05de: 60               rts                                 cycles: 6


INSCLR:             ;CLEAR GIVEN REGISTER
    LDA #0x00

0x05df: a9 00            lda #0x00                           cycles: 2

    STA LB,X

0x05e1: 95 00            sta 0x00,x                          cycles: 4

    STA HB,X

0x05e3: 95 01            sta 0x01,x                          cycles: 4

    RTS

0x05e5: 60               rts                                 cycles: 6

    
INSSWAP:
    STX TEMP

0x05e6: 86 24            stx 0x24                            cycles: 3

    CPY TEMP

0x05e8: c4 24            cpy 0x24                            cycles: 3

    BEQ INSSWAPBYTE

0x05ea: f0 19            beq 0x0605 (offset=25)              cycles: 2-6

    LDA LB,X

0x05ec: b5 00            lda 0x00,x                          cycles: 4

    PHA

0x05ee: 48               pha                                 cycles: 3

    LDA HB,X

0x05ef: b5 01            lda 0x01,x                          cycles: 4

    PHA

0x05f1: 48               pha                                 cycles: 3

    LDA LB,Y

0x05f2: b9 00 00         lda 0x0000,y                        cycles: 4-5

    STA LB,X

0x05f5: 95 00            sta 0x00,x                          cycles: 4

    LDA HB,Y

0x05f7: b9 01 00         lda 0x0001,y                        cycles: 4-5

    STA HB,X

0x05fa: 95 01            sta 0x01,x                          cycles: 4

    PLA

0x05fc: 68               pla                                 cycles: 4

    STA HB,Y

0x05fd: 99 01 00         sta 0x0001,y                        cycles: 5

    PLA

0x0600: 68               pla                                 cycles: 4

    STA LB,Y

0x0601: 99 00 00         sta 0x0000,y                        cycles: 5

    RTS

0x0604: 60               rts                                 cycles: 6

INSSWAPBYTE:
    LDA LB,X

0x0605: b5 00            lda 0x00,x                          cycles: 4

    TAY

0x0607: a8               tay                                 cycles: 2

    LDA HB,X

0x0608: b5 01            lda 0x01,x                          cycles: 4

    STA HB,X

0x060a: 95 01            sta 0x01,x                          cycles: 4

    TYA

0x060c: 98               tya                                 cycles: 2

    STA LB,X

0x060d: 95 00            sta 0x00,x                          cycles: 4

    RTS

0x060f: 60               rts                                 cycles: 6

    
CLRTEMP:            ;CLEAR TEMP SUBROUTINE
    LDA #0x00

0x0610: a9 00            lda #0x00                           cycles: 2

    STA TEMP

0x0612: 85 24            sta 0x24                            cycles: 3

    STA TEMP+1

0x0614: 85 25            sta 0x25                            cycles: 3

    STA TEMP+2

0x0616: 85 26            sta 0x26                            cycles: 3

    STA TEMP+3

0x0618: 85 27            sta 0x27                            cycles: 3

    RTS

0x061a: 60               rts                                 cycles: 6

    
CLRMULRSLT:         ;CLEAR MULTIPLICATION RESULT REGISTERS SUBROUTINE
    LDA #0x00

0x061b: a9 00            lda #0x00                           cycles: 2

    STA R12

0x061d: 85 18            sta 0x18                            cycles: 3

    STA R12+1

0x061f: 85 19            sta 0x19                            cycles: 3

    STA R13

0x0621: 85 1a            sta 0x1a                            cycles: 3

    STA R13+1

0x0623: 85 1b            sta 0x1b                            cycles: 3

    RTS

0x0625: 60               rts                                 cycles: 6


INSUMUL:            ;IF UNSIGNED MUL INSTRUCTION CALLED
    STX TEMP        ;BACKUP SOURCE ADDRESS

0x0626: 86 24            stx 0x24                            cycles: 3

    STY TEMP+1      ;BACKUP DESTINATION ADDRESS

0x0628: 84 25            sty 0x25                            cycles: 3

    JSR INSPUSH     ;PUSH SOURCE TO STACK

0x062a: 20 c1 05         jsr 0x05c1                          cycles: 6

    LDX TEMP+1      ;LOAD DESTINATION ADDRESS

0x062d: a6 25            ldx 0x25                            cycles: 3

    JSR INSPUSH     ;PUSH DESTINATION TO STACK

0x062f: 20 c1 05         jsr 0x05c1                          cycles: 6

    LDX TEMP        ;RESTORE SOURCE ADDRESS

0x0632: a6 24            ldx 0x24                            cycles: 3

    LDY TEMP+1      ;RESTORE DESTINATION ADDRESS

0x0634: a4 25            ldy 0x25                            cycles: 3

    LDA #0x01       ;LOAD A TO #0x01 FOR CLEARING NEGATIVE FLAG

0x0636: a9 01            lda #0x01                           cycles: 2

    PHP             ;PUSH SR TO STACK

0x0638: 08               php                                 cycles: 3

    BPL INSMULCOPY  ;JUMP TO MULTIPLICATION ROUTINE

0x0639: 10 3e            bpl 0x0679 (offset=62)              cycles: 2-5

INSSMUL:            ;IF SIGNED MUL INSTRUCTION CALLED
INSMULBACKUP:       ;IF MULTIPLICAND OR MULTIPLIER IS NEGATIVE
    STX TEMP        ;BACKUP SOURCE ADDRESS

0x063b: 86 24            stx 0x24                            cycles: 3

    STY TEMP+1      ;BACKUP DESTINATION ADDRESS

0x063d: 84 25            sty 0x25                            cycles: 3

    JSR INSPUSH     ;PUSH SOURCE TO STACK

0x063f: 20 c1 05         jsr 0x05c1                          cycles: 6

    LDX TEMP+1      ;LOAD DESTINATION ADDRESS

0x0642: a6 25            ldx 0x25                            cycles: 3

    JSR INSPUSH     ;PUSH DESTINATION TO STACK

0x0644: 20 c1 05         jsr 0x05c1                          cycles: 6

    LDX TEMP        ;RESTORE SOURCE ADDRESS

0x0647: a6 24            ldx 0x24                            cycles: 3

    LDY TEMP+1      ;RESTORE DESTINATION ADDRESS

0x0649: a4 25            ldy 0x25                            cycles: 3

INSMULSIGNTST:
    LDA HB,X        ;IF BOTH MSb OF MSBs IS SAME RESULT WILL BE POSITIVE

0x064b: b5 01            lda 0x01,x                          cycles: 4

    EOR HB,Y        ;ELSE RESULT WILL BE NEGATIVE

0x064d: 59 01 00         eor 0x0001,y                        cycles: 4-5

    PHP             ;PUSH SR TO STACK. WE WILL USE IT

0x0650: 08               php                                 cycles: 3

INSMULSRCTST:       ;TEST IF SOURCE NEGATIVE
    LDA HB,X

0x0651: b5 01            lda 0x01,x                          cycles: 4

    BPL INSMULDSTTST;IF NEGATIVE CONVERT IT TO POSITIVE ELSE JUMP TO DESTINATION TEST

0x0653: 10 0e            bpl 0x0663 (offset=14)              cycles: 2-5

    EOR #0xFF       ;FLIP ALL BITS

0x0655: 49 ff            eor #0xff                           cycles: 2

    CLC

0x0657: 18               clc                                 cycles: 2

    STA HB,X

0x0658: 95 01            sta 0x01,x                          cycles: 4

    LDA LB,X

0x065a: b5 00            lda 0x00,x                          cycles: 4

    EOR #0xFF

0x065c: 49 ff            eor #0xff                           cycles: 2

    CLC

0x065e: 18               clc                                 cycles: 2

    ADC #0x01

0x065f: 69 01            adc #0x01                           cycles: 2

    STA LB,X

0x0661: 95 00            sta 0x00,x                          cycles: 4

INSMULDSTTST:       ;TEST IF DESTINATION NEGATIVE
    LDA HB,Y

0x0663: b9 01 00         lda 0x0001,y                        cycles: 4-5

    BPL INSMULCOPY  ;IF NEGATIVE CONVERT IT TO POSITIVE ELSE JUMP TO MULTIPLICATION ROUTINE

0x0666: 10 11            bpl 0x0679 (offset=17)              cycles: 2-5

    EOR #0xFF

0x0668: 49 ff            eor #0xff                           cycles: 2

    CLC

0x066a: 18               clc                                 cycles: 2

    STA HB,Y

0x066b: 99 01 00         sta 0x0001,y                        cycles: 5

    LDA LB,Y

0x066e: b9 00 00         lda 0x0000,y                        cycles: 4-5

    EOR #0xFF

0x0671: 49 ff            eor #0xff                           cycles: 2

    CLC

0x0673: 18               clc                                 cycles: 2

    ADC #0x01

0x0674: 69 01            adc #0x01                           cycles: 2

    STA LB,Y

0x0676: 99 00 00         sta 0x0000,y                        cycles: 5

INSMULCOPY:
    JSR CLRMULRSLT

0x0679: 20 1b 06         jsr 0x061b                          cycles: 6

    LDA LB,Y        ;COPY DESTINATION LSB TO

0x067c: b9 00 00         lda 0x0000,y                        cycles: 4-5

    STA R12         ;PRODUCT LSB

0x067f: 85 18            sta 0x18                            cycles: 3

    LDA HB,Y        ;COPY DESTINATION MSB TO

0x0681: b9 01 00         lda 0x0001,y                        cycles: 4-5

    STA R12+1       ;PRODUCT LSB+1 

0x0684: 85 19            sta 0x19                            cycles: 3

INSMULINIT:
    LDY #0x10       ;LOAD 0x10 TO Y BECAUSE WE MULTIPLY 16x16-bit

0x0686: a0 10            ldy #0x10                           cycles: 2

    CLC             ;CLEAR CARRY

0x0688: 18               clc                                 cycles: 2

INSMULSHIFT:
    ROR R13+1       ;ROTATE RIGHT PRODUCT

0x0689: 66 1b            ror 0x1b                            cycles: 5

    ROR R13         

0x068b: 66 1a            ror 0x1a                            cycles: 5

    ROR R12+1       ;ALSO ROTATE MULTIPLIER

0x068d: 66 19            ror 0x19                            cycles: 5

    ROR R12

0x068f: 66 18            ror 0x18                            cycles: 5

    BCC INSMULTEST  ;IF ZERO GOTO TEST

0x0691: 90 0d            bcc 0x06a0 (offset=13)              cycles: 2-5

    CLC             ;CLEAR CARRY

0x0693: 18               clc                                 cycles: 2

INSMULADD:
    LDA R13         ;LOAD THIRD BYTE OF PRODUCT

0x0694: a5 1a            lda 0x1a                            cycles: 3

    ADC LB,X        ;ADD MULTIPLICAND LSB

0x0696: 75 00            adc 0x00,x                          cycles: 4

    STA R13         ;STORE SUM TO THIRD BYTE OF PRODUCT

0x0698: 85 1a            sta 0x1a                            cycles: 3

    LDA R13+1       ;LOAD FOURTH BYTE OF PRODUCT

0x069a: a5 1b            lda 0x1b                            cycles: 3

    ADC HB,X        ;ADD MULTIPLICAND MSB

0x069c: 75 01            adc 0x01,x                          cycles: 4

    STA R13+1       ;STORE SUM TO FOURTH BYTE OF PRODUCT

0x069e: 85 1b            sta 0x1b                            cycles: 3

INSMULTEST:
    DEY             ;DECREASE Y (HAS NO EFFECT ON CARRY)

0x06a0: 88               dey                                 cycles: 2

    BNE INSMULSHIFT ;IF COUNTER NOT ZERO GOTO LOOP

0x06a1: d0 e6            bne 0x0689 (offset=-26)             cycles: 2-5

    ROR R13+1       ;ROTATE RIGHT PRODUCT

0x06a3: 66 1b            ror 0x1b                            cycles: 5

    ROR R13         

0x06a5: 66 1a            ror 0x1a                            cycles: 5

    ROR R12+1       ;ALSO ROTATE MULTIPLIER

0x06a7: 66 19            ror 0x19                            cycles: 5

    ROR R12

0x06a9: 66 18            ror 0x18                            cycles: 5

INSMULSIGN:
    PLP             ;PULL SR WE PUSHED BEFORE

0x06ab: 28               plp                                 cycles: 4

    BPL INSMULRESTORE;IF SIGN OF RESULT IS POSITIVE (+ . + OR - . -)

0x06ac: 10 19            bpl 0x06c7 (offset=25)              cycles: 2-5

    LDA #0x00       ;ELSE TURN POSITIVE RESULT TO NEGATIVE

0x06ae: a9 00            lda #0x00                           cycles: 2

    SEC

0x06b0: 38               sec                                 cycles: 2

    SBC R12

0x06b1: e5 18            sbc 0x18                            cycles: 3

    STA R12

0x06b3: 85 18            sta 0x18                            cycles: 3

    LDA #0x00

0x06b5: a9 00            lda #0x00                           cycles: 2

    SBC R12+1

0x06b7: e5 19            sbc 0x19                            cycles: 3

    STA R12+1

0x06b9: 85 19            sta 0x19                            cycles: 3

    LDA #0x00

0x06bb: a9 00            lda #0x00                           cycles: 2

    SBC R13

0x06bd: e5 1a            sbc 0x1a                            cycles: 3

    STA R13

0x06bf: 85 1a            sta 0x1a                            cycles: 3

    LDA #0x00

0x06c1: a9 00            lda #0x00                           cycles: 2

    SBC R13+1

0x06c3: e5 1b            sbc 0x1b                            cycles: 3

    STA R13+1

0x06c5: 85 1b            sta 0x1b                            cycles: 3

INSMULRESTORE:
    LDX TEMP+1      ;LOAD DESTINATION ADDRESS

0x06c7: a6 25            ldx 0x25                            cycles: 3

    JSR INSPOP      ;POP REGISTER CONTENTS FROM STACK

0x06c9: 20 d0 05         jsr 0x05d0                          cycles: 6

    LDX TEMP        ;LOAD SOURCE ADDRESS

0x06cc: a6 24            ldx 0x24                            cycles: 3

    JSR INSPOP      ;POP REGISTER CONTENTS FROM STACK

0x06ce: 20 d0 05         jsr 0x05d0                          cycles: 6

INSMULRETURN:
    RTS             ;RETURN FROM SUBROUTINE

0x06d1: 60               rts                                 cycles: 6


INSAND:
    LDA LB,X

0x06d2: b5 00            lda 0x00,x                          cycles: 4

    AND LB,Y

0x06d4: 39 00 00         and 0x0000,y                        cycles: 4-5

    STA LB,Y

0x06d7: 99 00 00         sta 0x0000,y                        cycles: 5

    LDA HB,X

0x06da: b5 01            lda 0x01,x                          cycles: 4

    AND HB,Y

0x06dc: 39 01 00         and 0x0001,y                        cycles: 4-5

    STA HB,Y

0x06df: 99 01 00         sta 0x0001,y                        cycles: 5

    RTS

0x06e2: 60               rts                                 cycles: 6

    
INSIOR:
    LDA LB,X

0x06e3: b5 00            lda 0x00,x                          cycles: 4

    ORA LB,Y

0x06e5: 19 00 00         ora 0x0000,y                        cycles: 4-5

    STA LB,Y

0x06e8: 99 00 00         sta 0x0000,y                        cycles: 5

    LDA HB,X

0x06eb: b5 01            lda 0x01,x                          cycles: 4

    ORA HB,Y

0x06ed: 19 01 00         ora 0x0001,y                        cycles: 4-5

    STA HB,Y

0x06f0: 99 01 00         sta 0x0001,y                        cycles: 5

    RTS

0x06f3: 60               rts                                 cycles: 6


INSXOR:
    LDA LB,X

0x06f4: b5 00            lda 0x00,x                          cycles: 4

    EOR LB,Y

0x06f6: 59 00 00         eor 0x0000,y                        cycles: 4-5

    STA LB,Y

0x06f9: 99 00 00         sta 0x0000,y                        cycles: 5

    LDA HB,X

0x06fc: b5 01            lda 0x01,x                          cycles: 4

    EOR HB,Y

0x06fe: 59 01 00         eor 0x0001,y                        cycles: 4-5

    STA HB,Y

0x0701: 99 01 00         sta 0x0001,y                        cycles: 5

    RTS

0x0704: 60               rts                                 cycles: 6

    
INSASL:
INSLSL:
    TYA

0x0705: 98               tya                                 cycles: 2

    LSR

0x0706: 4a               lsr                                 cycles: 2

    TAY

0x0707: a8               tay                                 cycles: 2

INSASLLOOP:
    CLC

0x0708: 18               clc                                 cycles: 2

    ROL LB,X

0x0709: 36 00            rol 0x00,x                          cycles: 6

    ROL HB,X

0x070b: 36 01            rol 0x01,x                          cycles: 6

    DEY

0x070d: 88               dey                                 cycles: 2

    BPL INSASLLOOP

0x070e: 10 f8            bpl 0x0708 (offset=-8)              cycles: 2-5

    RTS

0x0710: 60               rts                                 cycles: 6


INSASR:
    TYA

0x0711: 98               tya                                 cycles: 2

    LSR

0x0712: 4a               lsr                                 cycles: 2

    TAY

0x0713: a8               tay                                 cycles: 2

INSASRTEST:
    CLC

0x0714: 18               clc                                 cycles: 2

    LDA HB,X

0x0715: b5 01            lda 0x01,x                          cycles: 4

    BPL INSASRLOOP

0x0717: 10 01            bpl 0x071a (offset=1)               cycles: 2-5

    SEC

0x0719: 38               sec                                 cycles: 2

INSASRLOOP:
    ROR HB,X

0x071a: 76 01            ror 0x01,x                          cycles: 6

    ROR LB,X

0x071c: 76 00            ror 0x00,x                          cycles: 6

    DEY

0x071e: 88               dey                                 cycles: 2

    BPL INSASRTEST

0x071f: 10 f3            bpl 0x0714 (offset=-13)             cycles: 2-5

    RTS

0x0721: 60               rts                                 cycles: 6


INSLSR:
    TYA

0x0722: 98               tya                                 cycles: 2

    LSR

0x0723: 4a               lsr                                 cycles: 2

    TAY

0x0724: a8               tay                                 cycles: 2

INSLSRLOOP:
    CLC

0x0725: 18               clc                                 cycles: 2

    ROR HB,X

0x0726: 76 01            ror 0x01,x                          cycles: 6

    ROR LB,X

0x0728: 76 00            ror 0x00,x                          cycles: 6

    DEY

0x072a: 88               dey                                 cycles: 2

    BPL INSLSRLOOP

0x072b: 10 f8            bpl 0x0725 (offset=-8)              cycles: 2-5

    RTS

0x072d: 60               rts                                 cycles: 6

    
INSROL:
    CLC

0x072e: 18               clc                                 cycles: 2

INSRLC:
    PHP

0x072f: 08               php                                 cycles: 3

    TYA

0x0730: 98               tya                                 cycles: 2

    LSR

0x0731: 4a               lsr                                 cycles: 2

    TAY

0x0732: a8               tay                                 cycles: 2

    PLP

0x0733: 28               plp                                 cycles: 4

INSROLLOOP:
    ROL LB,X

0x0734: 36 00            rol 0x00,x                          cycles: 6

    ROL HB,X

0x0736: 36 01            rol 0x01,x                          cycles: 6

    DEY

0x0738: 88               dey                                 cycles: 2

    BPL INSROLLOOP

0x0739: 10 f9            bpl 0x0734 (offset=-7)              cycles: 2-5

    RTS

0x073b: 60               rts                                 cycles: 6


INSROR:
    CLC

0x073c: 18               clc                                 cycles: 2

INSRRC:
    PHP

0x073d: 08               php                                 cycles: 3

    TYA

0x073e: 98               tya                                 cycles: 2

    LSR

0x073f: 4a               lsr                                 cycles: 2

    TAY

0x0740: a8               tay                                 cycles: 2

    PLP

0x0741: 28               plp                                 cycles: 4

INSRORLOOP:
    ROR HB,X

0x0742: 76 01            ror 0x01,x                          cycles: 6

    ROR LB,X

0x0744: 76 00            ror 0x00,x                          cycles: 6

    DEY

0x0746: 88               dey                                 cycles: 2

    BPL INSRORLOOP

0x0747: 10 f9            bpl 0x0742 (offset=-7)              cycles: 2-5

    RTS

0x0749: 60               rts                                 cycles: 6


INSMOVRR:           ;MOV REGISTER TO REGISTER
    LDA LB,X

0x074a: b5 00            lda 0x00,x                          cycles: 4

    STA LB,Y

0x074c: 99 00 00         sta 0x0000,y                        cycles: 5

    LDA HB,X

0x074f: b5 01            lda 0x01,x                          cycles: 4

    STA HB,Y

0x0751: 99 01 00         sta 0x0001,y                        cycles: 5

    RTS

0x0754: 60               rts                                 cycles: 6


INSMOVMR:           ;MOV POINTER TO REGISTER
    LSR LB,X        ;DESTROY BIT0 OF POINTER

0x0755: 56 00            lsr 0x00,x                          cycles: 6

    ASL LB,X        ;SHIFT RIGHT THEN LEFT

0x0757: 16 00            asl 0x00,x                          cycles: 6

    LDA (0x00,X)      ;LOAD POINTER LSB

0x0759: a1 00            lda (0x00,x)                        cycles: 6

    STA LB,Y        ;STORE REGISTER LSB

0x075b: 99 00 00         sta 0x0000,y                        cycles: 5

    INC LB,X        ;INCREASE POINTER TO ACCESS MSB

0x075e: f6 00            inc 0x00,x                          cycles: 6

    LDA (0x00,X)      ;LOAD POINTER MSB

0x0760: a1 00            lda (0x00,x)                        cycles: 6

    STA HB,Y        ;STORE REGISTER MSB

0x0762: 99 01 00         sta 0x0001,y                        cycles: 5

    DEC LB,X        ;DECREASE POINTER LSB AGAIN

0x0765: d6 00            dec 0x00,x                          cycles: 6

    RTS

0x0767: 60               rts                                 cycles: 6

    
INSMOVRM:           ;MOV REGISTER TO POINTER
    STY TEMP        ;SWAP POINTER AND REGISTER

0x0768: 84 24            sty 0x24                            cycles: 3

    TXA

0x076a: 8a               txa                                 cycles: 2

    TAY

0x076b: a8               tay                                 cycles: 2

    LDX TEMP

0x076c: a6 24            ldx 0x24                            cycles: 3

    LSR LB,X        ;DESTROY BIT0 OF POINTER

0x076e: 56 00            lsr 0x00,x                          cycles: 6

    ASL LB,X        ;SHIFT RIGHT THEN LEFT

0x0770: 16 00            asl 0x00,x                          cycles: 6

    LDA LB,Y        ;LOAD REGISTER LSB

0x0772: b9 00 00         lda 0x0000,y                        cycles: 4-5

    STA (0x00,X)    ;STORE POINTER LSB

0x0775: 81 00            sta (0x00,x)                        cycles: 6

    INC LB,X        ;INCREASE POINTER TO ACCESS MSB

0x0777: f6 00            inc 0x00,x                          cycles: 6

    LDA HB,Y        ;LOAD REGISTER MSB

0x0779: b9 01 00         lda 0x0001,y                        cycles: 4-5

    STA (0x00,X)    ;STORE POINTER MSB

0x077c: 81 00            sta (0x00,x)                        cycles: 6

    DEC LB,X        ;DECREASE POINTER LSB AGAIN

0x077e: d6 00            dec 0x00,x                          cycles: 6

    RTS

0x0780: 60               rts                                 cycles: 6


INSMOVMRI:          ;MOV POINTER TO REGISTER THEN INCREMENT POINTER
    JSR INSMOVMR

0x0781: 20 55 07         jsr 0x0755                          cycles: 6

    LDY #0x01

0x0784: a0 01            ldy #0x01                           cycles: 2

    JSR INSINC

0x0786: 20 6b 05         jsr 0x056b                          cycles: 6

    RTS

0x0789: 60               rts                                 cycles: 6


INSMOVRMI:          ;MOV REGISTER TO POINTER THEN INCREMENT POINTER
    JSR INSMOVRM

0x078a: 20 68 07         jsr 0x0768                          cycles: 6

    LDY #0x01

0x078d: a0 01            ldy #0x01                           cycles: 2

    JSR INSINC

0x078f: 20 6b 05         jsr 0x056b                          cycles: 6

    RTS

0x0792: 60               rts                                 cycles: 6

    
INSJSR:
    LDX #PC     ;#PC (0x1E)

0x0793: a2 1e            ldx #0x1e                           cycles: 2

    JSR INSPUSH ;PUSH RETURN PC TO STACK

0x0795: 20 c1 05         jsr 0x05c1                          cycles: 6

INSJMP:
    CLC         ;CLEAR CARRY FOR PROPER ADDITION

0x0798: 18               clc                                 cycles: 2

    LDY #0x01   ;FOR FETCHING JUMP ADDRESS FROM INSTRUCTION

0x0799: a0 01            ldy #0x01                           cycles: 2

    LDA (PC),Y  ;LOAD FIRST ARGUMENT (LSB OF SUBROUTINE PC)

0x079b: b1 1e            lda (0x1e),y                        cycles: 5-6

    ADC FIRSTPC ;ADD LSB OF FIRST VIRTUAL CPU INSTRUCTION ADDRESS TO GET PROPER ADDRESS OF SUBROUTINE

0x079d: 65 22            adc 0x22                            cycles: 3

    TAX         ;TRANSFER IT TO X

0x079f: aa               tax                                 cycles: 2

    INY         ;INCREASE Y

0x07a0: c8               iny                                 cycles: 2

    LDA (PC),Y  ;LOAD SECOND ARGUMENT (MSB OF SUBROUTINE PC)

0x07a1: b1 1e            lda (0x1e),y                        cycles: 5-6

    ADC FIRSTPC+1;ADD MSB OF FIRST VIRTUAL CPU INSTRUCTION ADDRESS TO GET PROPER ADDRESS OF SUBROUTINE

0x07a3: 65 23            adc 0x23                            cycles: 3

    STA PC+1    ;STORE IT TO MSB OF PC

0x07a5: 85 1f            sta 0x1f                            cycles: 3

    TXA         ;LOAD LSB BACK

0x07a7: 8a               txa                                 cycles: 2

    STA PC      ;STORE IT TO LSB OF PC

0x07a8: 85 1e            sta 0x1e                            cycles: 3

    PLA         ;PULL RETURN ADDRESS FOR CLEARING STACK

0x07aa: 68               pla                                 cycles: 4

    PLA         ;BECAUSE WE DONT WANT TO INCREMENT PC

0x07ab: 68               pla                                 cycles: 4

    JMP NEWINSTR;JUMP TO NEW INSTRUCTION

0x07ac: 4c 6e 04         jmp 0x046e                          cycles: 3


INSRTS:
    LDX #PC     ;LOAD ADDRESS OF PC

0x07af: a2 1e            ldx #0x1e                           cycles: 2

    JSR INSPOP  ;POP RETURN PC FROM STACK

0x07b1: 20 d0 05         jsr 0x05d0                          cycles: 6

INSRTSINCPC:
    INC PC          ;INCREMENT PC 1 TIME 

0x07b4: e6 1e            inc 0x1e                            cycles: 5

    BNE INSRTSEND   ;BECAUSE VIRTUAL CPU JSR INSTRUCTION TAKES 3 BYTE (ALL OTHER INSTRUCTIONS ARE 2 BYTE-1 WORD)

0x07b6: d0 02            bne 0x07ba (offset=2)               cycles: 2-5

    INC PC+1        ;IF PAGE CROSSED

0x07b8: e6 1f            inc 0x1f                            cycles: 5

INSRTSEND:
    RTS

0x07ba: 60               rts                                 cycles: 6

    
INSTR:
    DW INSRET-1   ;0x00
    DW INSMOVRR-1 ;0x01
    DW INSMOVMR-1 ;0x02
    DW INSMOVRM-1 ;0x03
    DW INSMOVMRI-1;0x04
    DW INSMOVRMI-1;0x05
    DW INSPUSH-1  ;0x06
    DW INSPOP-1   ;0x07
    DW INSCLR-1   ;0x08
    DW INSSWAP-1  ;0x09
    DW INSAND-1   ;0x0A
    DW INSIOR-1   ;0x0B
    DW INSXOR-1   ;0x0C
    DW INSJSR-1   ;0x0D
    DW INSRTS-1   ;0x0E
    DW INSJMP-1   ;0x0F
    DW INSINC-1   ;0x10
    DW INSDEC-1   ;0x11
    DW INSADD-1   ;0x12
    DW INSADC-1   ;0x13
    DW INSSUB-1   ;0x14
    DW INSSBC-1   ;0x15
    DW INSSMUL-1  ;0x16
    DW INSUMUL-1  ;0x17
    DW INSASL-1   ;0x18
    DW INSASR-1   ;0x19
    DW INSLSL-1   ;0x1A
    DW INSLSR-1   ;0x1B
    DW INSROL-1   ;0x1C
    DW INSRLC-1   ;0x1D
    DW INSROR-1   ;0x1E
    DW INSRRC-1   ;0x1Fdata sections:
07bb: 8e 05 49 07 54 07 67 07 80 07 89 07 c0 05 cf 05  ..I.T.g.........
07cb: de 05 e5 05 d1 06 e2 06 f3 06 92 07 ae 07 97 07  ................
07db: 6a 05 79 05 9c 05 9d 05 ae 05 af 05 3a 06 25 06  j...........:.%.
07eb: 04 07 10 07 04 07 21 07 2d 07 2e 07 3b 07 3c 07  ......!.-...;.<.


Program Info:
                         LABEL ADDRESS  SCOPE
                        VIRCPU 00000400 0
                     INITSTACK 00000403 0
                        LOADPC 00000412 0
                      PREINCPC 00000418 0
                       STOREPC 0000041e 0
                         FETCH 00000426 0
                     DECODEREG 00000442 0
                     RESTORESR 00000459 0
                       EXECUTE 0000045d 0
                       STORESR 0000045e 0
                        INCPC1 00000462 0
                        INCPC2 00000468 0
                      NEWINSTR 0000046e 0
                      ABSOLUTE 00000471 0
                     IMMEDIATE 00000474 0
                        BRANCH 00000477 0
                     DECODEABS 0000047a 0
                 DECODEABSLOAD 0000048d 0
                DECODEABSSTORE 00000498 0
                     ABSIMMEND 000004a1 0
                     ABSIMMRTS 000004a7 0
                     DECODEIMM 000004a8 0
                  DECODEIMMLSB 000004b8 0
                 DECODEIMMWORD 000004bc 0
                     DECODEBRN 000004d3 0
                        INSBPL 00000501 0
                        INSBMI 00000506 0
                        INSBEQ 0000050b 0
                        INSBNE 00000512 0
                        INSBM1 00000519 0
                       INSBNM1 00000522 0
                        INSBRA 0000052b 0
                        INSBCS 0000052e 0
                        INSBCC 00000535 0
                        INSNUL 0000053c 0
                    EXECUTEBRN 0000053d 0
                EXECUTEBRNNGTV 0000054a 0
                EXECUTEBRNPSTV 0000054f 0
                          SAVE 00000554 0
                       RESTORE 00000560 0
                        INSINC 0000056b 0
                        INSDEC 0000057a 0
                        INSRET 0000058f 0
                 INSRETRESTORE 00000595 0
                        INSADD 0000059d 0
                        INSADC 0000059e 0
                        INSSUB 000005af 0
                        INSSBC 000005b0 0
                  INSSUBRETURN 000005c0 0
                       INSPUSH 000005c1 0
                        INSPOP 000005d0 0
                        INSCLR 000005df 0
                       INSSWAP 000005e6 0
                   INSSWAPBYTE 00000605 0
                       CLRTEMP 00000610 0
                    CLRMULRSLT 0000061b 0
                       INSUMUL 00000626 0
                       INSSMUL 0000063b 0
                  INSMULBACKUP 0000063b 0
                 INSMULSIGNTST 0000064b 0
                  INSMULSRCTST 00000651 0
                  INSMULDSTTST 00000663 0
                    INSMULCOPY 00000679 0
                    INSMULINIT 00000686 0
                   INSMULSHIFT 00000689 0
                     INSMULADD 00000694 0
                    INSMULTEST 000006a0 0
                    INSMULSIGN 000006ab 0
                 INSMULRESTORE 000006c7 0
                  INSMULRETURN 000006d1 0
                        INSAND 000006d2 0
                        INSIOR 000006e3 0
                        INSXOR 000006f4 0
                        INSASL 00000705 0
                        INSLSL 00000705 0
                    INSASLLOOP 00000708 0
                        INSASR 00000711 0
                    INSASRTEST 00000714 0
                    INSASRLOOP 0000071a 0
                        INSLSR 00000722 0
                    INSLSRLOOP 00000725 0
                        INSROL 0000072e 0
                        INSRLC 0000072f 0
                    INSROLLOOP 00000734 0
                        INSROR 0000073c 0
                        INSRRC 0000073d 0
                    INSRORLOOP 00000742 0
                      INSMOVRR 0000074a 0
                      INSMOVMR 00000755 0
                      INSMOVRM 00000768 0
                     INSMOVMRI 00000781 0
                     INSMOVRMI 0000078a 0
                        INSJSR 00000793 0
                        INSJMP 00000798 0
                        INSRTS 000007af 0
                   INSRTSINCPC 000007b4 0
                     INSRTSEND 000007ba 0
                         INSTR 000007bb 0
 -> Total symbols: 98

Include Paths: .
               /usr/local/share/naken_asm/include
               include
 Instructions: 532
   Code Bytes: 955
   Data Bytes: 64
  Low Address: 0400 (1024)
 High Address: 07fa (2042)

